---

- name: Updating nodes in the environment and adding swap to them
  hosts: all
  become: yes
  roles:
  - common
  tags:
  - updatingnodes

- name: Setting up networking in load balancer nodes
  hosts: lb_nodes
  become: yes
  roles:
  - networking
  tags:
  - networking
  - networking_lbs
  vars:
    bridges:
    - br-mgmt
    nodetype: lb

- name: Setting up networking in controller nodes
  hosts: controller_nodes
  become: yes
  roles:
  - networking
  tags:
  - networking
  - networking_controllers
  vars:
    bridges:
    - br-mgmt
    - br-storage
    - br-provider
    - br-vxlan
    - br-vlan
    nodetype: controller

- name: Setting up networking in compute nodes
  hosts: compute_nodes
  become: yes
  roles:
  - networking
  tags:
  - networking
  - networking_computes
  vars:
    bridges:
    - br-mgmt
    - br-vxlan
    - br-storage
    - br-vlan
    nodetype: compute

- name: Setting up networking in network nodes
  hosts: network_nodes
  become: yes
  roles:
  - networking
  tags:
  - networking
  - networking_network
  vars:
    bridges:
    - br-mgmt
    - br-vxlan
    - br-vlan
    - br-provider
    nodetype: network

- name: Setting up networking in cinder nodes
  hosts: cinder_nodes
  become: yes
  roles:
  - networking
  tags:
  - networking
  - networking_cinder
  vars:
    bridges:
    - br-mgmt
    - br-storage
    nodetype: cinder

- name: Setting up networking in ceph nodes
  hosts: ceph_nodes
  become: yes
  roles:
  - networking
  tags:
  - networking
  - networking_ceph
  vars:
    bridges:
    - br-mgmt
    - br-storage
    nodetype: ceph

- name: Setting up networking in nfs nodes
  hosts: nfs_nodes
  become: yes
  roles:
  - networking
  tags:
  - networking
  - networking_nfs
  - nfs_nodes
  vars:
    bridges:
    - br-mgmt
    - br-storage
    nodetype: nfs

- name: Setting up networking in logging nodes
  hosts: logging_nodes
  become: yes
  roles:
  - networking
  tags:
  - networking
  - networking_logging
  vars:
    bridges:
    - br-mgmt
    nodetype: logging

- name: Setting up networking in swift nodes
  hosts: swift_nodes
  become: yes
  roles:
  - networking
  tags:
  - networking
  - networking_swift
  vars:
    bridges:
    - br-mgmt
    - br-storage
    nodetype: swift

# Used IP ddresses
- name: Gathering used IP addresses
  hosts: all
  tasks:
  - shell: "ip -o addr | grep -v inet6 | grep -vE 'eth0|127.0.0.1' | awk '{ print $4 }' | awk -F/ '{ printf \"%s,\", $1 }' | sed 's/,$//'"
    register: interfaces
  - debug:
      msg: "{{ interfaces.stdout }}"
    when: interfaces.rc == 0
  tags:
  - used_ips

- name: Creating volume group cinder-volumes in cinder nodes
  hosts: cinder_nodes
  become: yes
  tasks:
  - lvg:
      vg: cinder-volumes
      pvs: /dev/vdb
  tags:
  - cinder-volgroup

- name: Setting up Swift nodes
  hosts: swift_nodes
  become: yes
  tasks:
  - name: Formatting the devices to be used by the swift node
    filesystem:
      fstype: xfs
      dev: "/dev/{{ item }}"
      opts: "-f -i size=1024 -L {{ item }}"
    with_items:
    - vdb
    - vdc
    - vdd
    - vde
    - vdf
  - name: Add the recently formmated devices to fstab
    mount:
      fstype: xfs
      opts: noatime,nodiratime,nobarrier,logbufs=8,noauto
      path: "/srv/node/{{ item }}"
      src: "LABEL={{ item }}"
      state: mounted
    with_items:
    - vdb
    - vdc
    - vdd
    - vde
    - vdf

- name: Setting up NFS nodes so they can work with OpenStack
  hosts: nfs_nodes
  become: yes
  tasks:
  - name: Creating a primary partition on the disk which will be exported as an NFS share
    parted:
      device: /dev/vdb
      number: 1
      label: gpt
      name: 'nfs-partiton'
      state: present
  - name: Formatting the recently created disk partition
    filesystem:
      fstype: ext4
      dev: /dev/vdb1
  - name: Creating the group nfs-group
    group:
      name: nfs-group
  - name: Creating the user nfs-user and adding it to the nfs-group
    user:
      name: nfs-user
      group: nfs-group
  - name: Creating the directory in which the disk will be mounted
    file:
      path: "/mnt/{{ ansible_host }}-vol1"
      state: directory
  - name: Mounting the disk and make this persistent across reboots
    mount:
      fstype: ext4
      opts: defaults
      path: "/mnt/{{ ansible_host }}-vol1"
      src: /dev/vdb1 
      state: mounted
  - name: Changing recursively the owner and owner group of the directory to be exported
    file:
      path: "/mnt/{{ ansible_host }}-vol1"
      owner: nfs-user
      group: nfs-group
      state: directory
      recurse: yes
  - name: Determining the UID assigned to the nfs-user user
    shell:
      cmd: "awk -F: '/nfs-user/ { print $3 }' /etc/passwd"
    register: nfs_user
  - name: Determining the GID assigned to the nfs-group group
    shell:
      cmd: "awk -F: '/nfs-group/ { print $3 }' /etc/group"
    register: nfs_group
  - debug:
      var: nfs_user
  - debug:
      var: nfs_group
  - name: Installing the NFS server
    apt:
      name: nfs-kernel-server
      state: latest
      update_cache: yes
  - name: Determining the storage network 
    shell:
      cmd: "ip -o addr show dev br-storage | grep -v inet6 | awk '{ print $4 }' | awk -F. '{ printf \"%s.%s.%s.0\", $1,$2,$3 }'"
    register: storage_address
  - name: Adding NFS shares to /etc/exports
    template:
      dest: /etc/exports
      src: exports.j2
      backup: yes
    when: storage_address.rc == 0 and nfs_user.rc == 0 and nfs_group.rc == 0
  - name: Restarting the nfs-server service
    systemd:
      enabled: yes
      name: nfs-server
      state: restarted
  tags:
  - nfs_nodes

- name: Cloning, preparing and bootstrapping OpenStack-Ansible
  hosts: deployment_nodes
  become: yes
  roles:
  - openstack-ansible
  tags:
  - openstackansiblesetup
  vars:
    openstack_version: stable/train

- name: Fetching the public key from the deployment node
  hosts: deployment_nodes
  become: yes
  tasks:
  - name: Fetching public key from deployment node
    fetch:
      dest: authorized_keys
      src: /root/.ssh/id_rsa.pub
      flat: yes
  tags:
  - copyingpublickey

- name: Copying SSH public key to the deploy nodes
  hosts: infrastructure_nodes
  become: yes
  tasks:
  - name: Making sure that the /root/.ssh directory exists
    file:
      mode: '0700'
      state: directory
      path: /root/.ssh
  - name: Copying public key to the authorized_keys file
    copy:
      src: authorized_keys
      mode: '0600'
      dest: /root/.ssh/authorized_keys
  tags:
  - copyingpublickey

- name: Installing OpenStack
  hosts: deployment_nodes
  become: yes
  tasks:
  - name: Executing openstack-ansible setup-hosts.yml
    shell:
      cmd: openstack-ansible setup-hosts.yml >/tmp/setup-hosts.log
      chdir: /opt/openstack-ansible/playbooks
  - name: Executing openstack-ansible haproxy-install.yml
    shell:
      cmd: openstack-ansible haproxy-install.yml >/tmp/haproxy-install.log
      chdir: /opt/openstack-ansible/playbooks
  - name: Executing openstack-ansible setup-infrastructure.yml
    shell:
      cmd: openstack-ansible setup-infrastructure.yml >/tmp/setup-infrastructure.log
      chdir: /opt/openstack-ansible/playbooks
  - name: Installing git in containers
    shell:
      cmd: ansible -m shell -a 'apt-get install git' heat_api,placement_api,horizon_container
      chdir: /opt/openstack-ansible/playbooks
  - name: Executing openstack-ansible setup-openstack.yml
    shell:
      cmd: openstack-ansible setup-openstack.yml >/tmp/setup-openstack.log
      chdir: /opt/openstack-ansible/playbooks
  tags:
  - install_openstack
